from statistics import *
from output import *
from helper import rewrite_key
import matplotlib.pyplot as plt

# plots all cable loads over time and saves them to a file.
def plot_all_cable_loads(statistics, fname):
    x = [x[0]/(24*60) for x in statistics.load_over_time[9]]
    plt.axhline(y=200, color='gray', linestyle='--')
    plt.axhline(y=1000, color='gray', linestyle='--')

    plt.axhline(y=0, color = 'black', linestyle='-')

    plt.fill_between(x, 200, 220,color='gray', alpha=0.2)
    plt.fill_between(x, 1000, 1100,color='gray', alpha=0.2)

    for cable, load_over_t in statistics.load_over_time.items():
        label = "cable " + str(cable) if cable != 9 else "main cable"
        plt.plot([x[0]/(24*60) for x in load_over_t], [x[1] for x in load_over_t], label = label)

    plt.xlabel("Time (days)")
    plt.ylabel("Load over all cables (kWh)")
    plt.legend()
    plt.savefig('./results/figs/{}.pdf'.format(fname), bbox_inches='tight')
    plt.clf()

# plots the load of the main cable over time.
def plot_load_over_time(statistics, solar_locations, fname) :
    load_over_t = statistics.load_over_time[9]
    solar_over_t = statistics.solar_over_time(solar_locations)

    plt.plot([x[0] for x in load_over_t], [x[1] for x in load_over_t])
    plt.xlabel("Time (minutes)")
    plt.ylabel("Load over main cable (kWh)")
    plt.savefig('./results/figs/{}.pdf'.format(fname), bbox_inches='tight')
    plt.clf()

# plots the solar revenue over time
def plot_solar_over_time(statistics, solar_locations):
    plt.plot([x[0] for x in statistics.solar_factor_over_time], [x[1]*200*len(solar_locations) for x in statistics.solar_factor_over_time])
    plt.show()

# plots the confidence intervals generated by comparison_with_standard
def plot_confidence_intervals(intervals_list, standard = None, horizontal_line_width = 0.25, color = '#2187bb'):
    num_of_plots = len(intervals_list)
    for i in range(num_of_plots):
        intervals = intervals_list[i][1]
        x = 0
        names = []
        for name, interval in intervals:
            x += 1
            names.append(rewrite_key(name)[1])
            bottom,top = interval
            mean = bottom+(top-bottom)/2
            left = x - horizontal_line_width / 2
            right = x + horizontal_line_width / 2
            plt.plot([x, x], [top, bottom], color=color)
            plt.plot([left, right], [top, top], color=color)
            plt.plot([left, right], [bottom, bottom], color=color)
            plt.plot(x, mean, 'o', color='#f44336')

        plt.xticks(range(1,len(intervals)+1), names, rotation=45, ha="right")
        if standard != None:
            title = str(intervals_list[i][0]).replace("_", " ") + "when compared to" + standard[0]
        else:
            title = "All pairwise comparisons for blackouts"
        plt.savefig('./results/figs/{}.pdf'.format(title), bbox_inches='tight')
        plt.clf()
